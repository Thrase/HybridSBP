import Compat: range, undef
using Compat.SparseArrays
using Compat.LinearAlgebra
# DIAGONAL_SBP_D2 creates a diagonal norm SBP operator for the 2nd drerivative
# (D, BS, Hinv, H, r) = diagonal_sbp_D2(p, N; xc = (-1,1))
  (D, BS, HI, H, r)
#
# inputs:
#   p: sbp interior accuracy
#   N: finite difference grid size is N+1
#   xc: (keyword) grid span [default: (-1, 1)]
#
# outputs:
#   D:   difference operator Hinv*(-M+BS)
#   BS:  boundary derivative operator
#   HI:  inverse of the SBP norm
#   H:   the SBP norm
#   r:   grid from xc[1] to xc[2]
#
#   References:
#   Operators for order 2, 4, 6, 8 are from
#   @book{gustafsson2008high,
#     title={High order difference methods for time dependent PDE},
#     author={Gustafsson, Bertil},
#     year={2008},
#     publisher={Springer},
#     series={Springer Series in Computational Mathematics},
#     volume={38}
#   }
#
#   Order 10 operator is from
#   @Article{MattssonAlmquist2013JCP,
#     author = {K. Mattsson and M. Almquist},
#     title = {A solution to the stability issues with block norm summation by
#     parts operators},
#     journal = {Journal of Computational Physics},
#     volume = {253},
#     pages = {418--442},
#     year = {2013},
#     doi = {10.1016/j.jcp.2013.07.013}
#   }

function diagonal_sbp_D2(p, N; xc = (-1, 1))

  if p == 2
    bhinv = [2];

    d  = [1 -2 1];
    bd  = d;

    BS = [3/2 -2 1/2];
  elseif p == 4
    bhinv = [48/17 48/59 48/43 48/49];

    d  = [-1/12 4/3 -5/2 4/3 -1/12];

    bd = [ 2    -5       4     -1       0      0;
           1    -2       1      0       0      0;
          -4/43 59/43 -110/43  59/43   -4/43   0;
          -1/49  0      59/49 -118/49  64/49  -4/49];

    BS = [11/6 -3 3/2 -1/3];

  elseif p == 6
    bhinv = [43200/13649 8640/12013 4320/2711 4320/5359 8640/7877 43200/43801];

    d = [1/90 -3/20 3/2 -49/18 3/2 -3/20 1/90];

    bd = [  114170/40947   -438107/54596   336409/40947  -276997/81894     3747/13649     21035/163788      0           0         0
              6173/5860      -2066/879       3283/1758      -303/293       2111/3516       -601/4395        0           0         0
            -52391/81330    134603/32532   -21982/2711    112915/16266   -46969/16266     30409/54220       0           0         0
             68603/321540   -12423/10718   112915/32154   -75934/16077    53369/21436    -54899/160770     48/5359      0         0
             -7053/39385     86551/94524   -46969/23631    53369/15754   -87904/23631    820271/472620  -1296/7877     96/7877    0
             21035/525612   -24641/131403   30409/87602   -54899/131403  820271/525612  -117600/43801   64800/43801 -6480/43801 480/43801];

    BS = [25/12 -4 3 -4/3 1/4];

  elseif p == 8
    bhinv = [5080320/1498139 725760/1107307 80640/20761 725760/1304999 725760/299527 80640/103097 725760/670091 5080320/5127739];
    d = [-1/560 8/315 -1/5 8/5 -205/72 8/5 -1/5 8/315 -1/560]

    bd = zeros(8,12);
    bd[1, 1] =  4870382994799/1358976868290;
    bd[1, 2] =  -893640087518/75498714905  ;
    bd[1, 3] =   926594825119/60398971924  ;
    bd[1, 4] = -1315109406200/135897686829 ;
    bd[1, 5] =    39126983272/15099742981  ;
    bd[1, 6] =    12344491342/75498714905  ;
    bd[1, 7] =  -451560522577/2717953736580;

    bd[2, 1] =  333806012194/390619153855;
    bd[2, 2] = -154646272029/111605472530;
    bd[2, 3] =    1168338040/33481641759 ;
    bd[2, 4] =   82699112501/133926567036;
    bd[2, 5] =    -171562838/11160547253 ;
    bd[2, 6] =  -28244698346/167408208795;
    bd[2, 7] =   11904122576/167408208795;
    bd[2, 8] =   -2598164715/312495323084;

    bd[3, 1] =   7838984095/52731029988;
    bd[3, 2] =   1168338040/5649753213 ;
    bd[3, 3] =    -88747895/144865467  ;
    bd[3, 4] =    423587231/627750357  ;
    bd[3, 5] = -43205598281/22599012852;
    bd[3, 6] =   4876378562/1883251071 ;
    bd[3, 7] =  -5124426509/3766502142 ;
    bd[3, 8] =  10496900965/39548272491;

    bd[4, 1] =  -94978241528/828644350023;
    bd[4, 2] =   82699112501/157837019052;
    bd[4, 3] =    1270761693/13153084921 ;
    bd[4, 4] = -167389605005/118377764289;
    bd[4, 5] =   48242560214/39459254763 ;
    bd[4, 6] =  -31673996013/52612339684 ;
    bd[4, 7] =   43556319241/118377764289;
    bd[4, 8] =  -44430275135/552429566682;

    bd[5, 1] =   1455067816/21132528431;
    bd[5, 2] =   -171562838/3018932633 ;
    bd[5, 3] = -43205598281/36227191596;
    bd[5, 4] =  48242560214/9056797899 ;
    bd[5, 5] = -52276055645/6037865266 ;
    bd[5, 6] =  57521587238/9056797899 ;
    bd[5, 7] = -80321706377/36227191596;
    bd[5, 8] =   8078087158/21132528431;
    bd[5, 9] =        -1296/299527     ;

    bd[6, 1] =   10881504334/327321118845;
    bd[6, 2] =  -28244698346/140280479505;
    bd[6, 3] =    4876378562/9352031967  ;
    bd[6, 4] =  -10557998671/12469375956 ;
    bd[6, 5] =   57521587238/28056095901 ;
    bd[6, 6] = -278531401019/93520319670 ;
    bd[6, 7] =   73790130002/46760159835 ;
    bd[6, 8] = -137529995233/785570685228;
    bd[6, 9] =          2048/103097      ;
    bd[6,10] =          -144/103097      ;

    bd[7, 1] = -135555328849/8509847458140;
    bd[7, 2] =   11904122576/101307707835 ;
    bd[7, 3] =   -5124426509/13507694378  ;
    bd[7, 4] =   43556319241/60784624701  ;
    bd[7, 5] =  -80321706377/81046166268  ;
    bd[7, 6] =   73790130002/33769235945  ;
    bd[7, 7] = -950494905688/303923123505 ;
    bd[7, 8] =  239073018673/141830790969 ;
    bd[7, 9] =       -145152/670091       ;
    bd[7,10] =         18432/670091       ;
    bd[7,11] =        -1296/670091        ;


    bd[8, 1] =             0             ;
    bd[8, 2] =   -2598164715/206729925524;
    bd[8, 3] =   10496900965/155047444143;
    bd[8, 4] =  -44430275135/310094888286;
    bd[8, 5] =     425162482/2720130599  ;
    bd[8, 6] = -137529995233/620189776572;
    bd[8, 7] =  239073018673/155047444143;
    bd[8, 8] = -144648000000/51682481381 ;
    bd[8, 9] =       8128512/5127739     ;
    bd[8,10] =      -1016064/5127739     ;
    bd[8,11] =        129024/5127739     ;
    bd[8,12] =         -9072/5127739     ;

    BS = [4723/2100 -839/175 157/35 -278/105 103/140 1/175 -6/175];

  elseif p == 10
    bhinv = [18289152000/5261271563 1828915200/2881040311 406425600/52175551 6096384/11662993 87091200/50124587 72576000/50124587 87091200/148333439 152409600/63867949 16257024/20608675 1828915200/1704508063 18289152000/18425967263];

    M = zeros(11,16);

    M[ 1, 1] =  1.2056593789671863908;
    M[ 1, 2] = -1.3378814169347239658;
    M[ 1, 3] =  0.0036847309286546532061;
    M[ 1, 4] =  0.15698288365600946515;
    M[ 1, 5] = -0.0037472461482539197952;
    M[ 1, 6] = -0.0062491712449361657064;
    M[ 1, 7] = -0.029164045872729581661;
    M[ 1, 8] =  0.00054848184117832929161;
    M[ 1, 9] =  0.013613461413384884448;
    M[ 1,10] = -0.0025059220258337808220;
    M[ 1,11] = -0.00094113457993630916498;

    M[ 2, 2] =  2.1749807117105597139;
    M[ 2, 3] = -0.12369059547124894597;
    M[ 2, 4] = -0.83712574037924152603;
    M[ 2, 5] =  0.050065127254670973258;
    M[ 2, 6] =  0.0081045853127317536361;
    M[ 2, 7] =  0.097405846039248226536;
    M[ 2, 8] = -0.00068942461520402214720;
    M[ 2, 9] = -0.041326971493379188475;
    M[ 2,10] =  0.0075778529605774119402;
    M[ 2,11] =  0.0025800256160095691057;

    M[ 3, 3] =  0.18361596652499065332;
    M[ 3, 4] =  0.048289690013342693109;
    M[ 3, 5] = -0.19719621435164680412;
    M[ 3, 6] =  0.11406859029505842791;
    M[ 3, 7] = -0.029646295985488126964;
    M[ 3, 8] = -0.0016038463172861201306;
    M[ 3, 9] =  0.0032879841528337653050;
    M[ 3,10] = -0.00093242311589807387463;
    M[ 3,11] =  0.00012241332668787820533;

    M[ 4, 4] =  1.2886524606662484673;
    M[ 4, 5] = -0.14403037739488789185;
    M[ 4, 6] = -0.44846291607489015475;
    M[ 4, 7] = -0.10598334599408054277;
    M[ 4, 8] = -0.015873275740355918053;
    M[ 4, 9] =  0.073988493386459608166;
    M[ 4,10] = -0.012508848749152899785;
    M[ 4,11] = -0.0039290233894513005339;

    M[ 5, 5] =  0.51482665719685186210;
    M[ 5, 6] =  0.051199577887125103015;
    M[ 5, 7] = -0.36233561810883077365;
    M[ 5, 8] =  0.091356850268746392169;
    M[ 5, 9] =  0.0024195916108052419451;
    M[ 5,10] = -0.0018564214413731389338;
    M[ 5,11] = -0.00070192677320704413827;

    M[ 6, 6] =  0.68636003380365860083;
    M[ 6, 7] = -0.28358848290867614908;
    M[ 6, 8] = -0.13836006478253396528;
    M[ 6, 9] =  0.0076158070663111995297;
    M[ 6,10] =  0.011447010307180005164;
    M[ 6,11] = -0.0021349696610286552676;

    M[ 7, 7] =  1.5216081480839085990;
    M[ 7, 8] = -0.42653865162216293237;
    M[ 7, 9] = -0.42047484981879143123;
    M[ 7,10] =  0.019813359263872926304;
    M[ 7,11] =  0.019221397241190103344;

    M[ 8, 8] =  1.0656733504627815335;
    M[ 8, 9] = -0.66921872668484232217;
    M[ 8,10] =  0.12022033144141336599;
    M[ 8,11] = -0.030157881394591483631;

    M[ 9, 9] =  2.4064247712949611684;
    M[ 9,10] = -1.5150200315922263367;
    M[ 9,11] =  0.17373015320416595052;

    M[10,10] =  2.7682502485427255096;
    M[10,11] = -1.5975407111468405444;

    M[11,11] =  2.9033627686681129471;
    d     = [1/3150  -5/1008  5/126  -5/21  5/3 -5269/1800 5/3 -5/21 5/126 -5/1008 1/3150]
    for k = 1:5
      M[11-5+k,11 .+ (1:k)] = -d[k:-1:1];
    end

    M[1:11,1:11] = M[1:11,1:11]'+M[1:11,1:11]-diagm(0 => diag(M[1:11,1:11]));

    BS = zeros(1,16);
    BS[1:7] = -[-49/20 6 -15/2 20/3 -15/4 6/5 -1/6];
    e0 = zeros(11,1);
    e0[1] = 1;

    bd = diagm(0 => bhinv[:]) * (-M+e0*BS);

  else
    error(string("Operators for order ", p, " are not implemented"))
  end

  (bm, bn) = size(bd);

  M = N+1;
  if(M < 2*bm || M < bn)
    error("Grid not big enough to support the operator. Grid must have N >= ", max(bn,2*bm))
  end

  h = (xc[2] - xc[1]) / N
  @assert h > 0
  H_I = 1:M
  H_V = ones(M)
  H_V[1:bm] = bhinv[:]
  H_V[M-bm+1:M] = bhinv[end:-1:1]
  HI = sparse(H_I, H_I, H_V / h)
  H  = sparse(H_I, H_I, h ./ H_V)

  n = floor(Int64, length(d)/2);
  B_I1 = (bm+1:M-bm) * ones(1,p+1)
  B_J1 = ones(M-2bm,1) * (-div(p,2):div(p,2))' + B_I1
  B_V1 = ones(M-2bm)
  B_V1 = kron(B_V1, d)

  B_I2 = (1:bm) * ones(1, bn)
  B_J2 = ones(bm) * (1:bn)'
  B_V2 = bd
  B_I3 = (M+1) .- B_I2
  B_J3 = (M+1) .- B_J2
  B_V3 = B_V2
  D = sparse([B_I1[:];B_I2[:];B_I3[:]],
             [B_J1[:];B_J2[:];B_J3[:]],
             [B_V1[:];B_V2[:];B_V3[:]]/h^2, N+1, N+1)

  BS = sparse([ones(length(BS)); (N+1) * ones(length(BS))],
              [1:length(BS);(N+2) .- (1:length(BS))],
              [BS[:];BS[:]]/h);

  r = Compat.range(xc[1], stop=xc[2], length=N+1)

  (D, BS, HI, H, r)

end
